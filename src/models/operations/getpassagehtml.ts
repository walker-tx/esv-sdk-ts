/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPassageHtmlRequest = {
  /**
   * Bible passage reference (e.g., "John 3:16" or "43011016")
   */
  q: string;
  /**
   * Include passage references before passages
   */
  includePassageReferences?: boolean | undefined;
  /**
   * Include verse numbers
   */
  includeVerseNumbers?: boolean | undefined;
  /**
   * Include the verse number for the first verse of a chapter
   */
  includeFirstVerseNumbers?: boolean | undefined;
  /**
   * Include callouts to footnotes in the text.
   */
  includeFootnotes?: boolean | undefined;
  /**
   * Include footnote body content
   */
  includeFootnoteBody?: boolean | undefined;
  /**
   * Include passage headings
   */
  includeHeadings?: boolean | undefined;
  /**
   * Include a short copyright notice
   */
  includeShortCopyright?: boolean | undefined;
  /**
   * Include the full copyright notice
   */
  includeCopyright?: boolean | undefined;
  /**
   * Include horizontal lines between passages
   */
  includePassageHorizontalLines?: boolean | undefined;
  /**
   * Include horizontal lines under headings
   */
  includeHeadingHorizontalLines?: boolean | undefined;
  /**
   * Length of horizontal lines
   */
  horizontalLineLength?: number | undefined;
  /**
   * Include "Selah" in passage text
   */
  includeSelahs?: boolean | undefined;
  /**
   * Include a link to the ESV API CSS file
   */
  includeCssLink?: boolean | undefined;
  /**
   * Include inline styles on HTML elements
   */
  inlineStyles?: boolean | undefined;
  /**
   * Wrap the HTML output in a div with class="esv"
   */
  wrappingDiv?: boolean | undefined;
  /**
   * Classes to add to the wrapping div
   */
  divClasses?: string | undefined;
};

export type PassageMeta = {
  canonical?: string | undefined;
  chapterStart?: Array<number> | undefined;
  chapterEnd?: Array<number> | undefined;
  prevVerse?: Array<number> | undefined;
  nextVerse?: Array<number> | undefined;
  prevChapter?: Array<number> | undefined;
  nextChapter?: Array<number> | undefined;
};

/**
 * Successful response
 */
export type GetPassageHtmlResponseBody = {
  /**
   * The passage reference that was requested
   */
  query?: string | undefined;
  /**
   * The canonical version of the passage reference
   */
  canonical?: string | undefined;
  /**
   * Array of parsed passage references
   */
  parsed?: Array<Array<number>> | undefined;
  passageMeta?: Array<PassageMeta> | undefined;
  /**
   * Array of HTML-formatted passage text
   */
  passages?: Array<string> | undefined;
};

/** @internal */
export const GetPassageHtmlRequest$inboundSchema: z.ZodType<
  GetPassageHtmlRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  q: z.string(),
  "include-passage-references": z.boolean().default(true),
  "include-verse-numbers": z.boolean().default(true),
  "include-first-verse-numbers": z.boolean().default(true),
  "include-footnotes": z.boolean().default(true),
  "include-footnote-body": z.boolean().default(true),
  "include-headings": z.boolean().default(true),
  "include-short-copyright": z.boolean().default(false),
  "include-copyright": z.boolean().default(false),
  "include-passage-horizontal-lines": z.boolean().default(false),
  "include-heading-horizontal-lines": z.boolean().default(false),
  "horizontal-line-length": z.number().int().default(55),
  "include-selahs": z.boolean().default(true),
  "include-css-link": z.boolean().default(true),
  "inline-styles": z.boolean().default(false),
  "wrapping-div": z.boolean().default(true),
  "div-classes": z.string().default("esv"),
}).transform((v) => {
  return remap$(v, {
    "include-passage-references": "includePassageReferences",
    "include-verse-numbers": "includeVerseNumbers",
    "include-first-verse-numbers": "includeFirstVerseNumbers",
    "include-footnotes": "includeFootnotes",
    "include-footnote-body": "includeFootnoteBody",
    "include-headings": "includeHeadings",
    "include-short-copyright": "includeShortCopyright",
    "include-copyright": "includeCopyright",
    "include-passage-horizontal-lines": "includePassageHorizontalLines",
    "include-heading-horizontal-lines": "includeHeadingHorizontalLines",
    "horizontal-line-length": "horizontalLineLength",
    "include-selahs": "includeSelahs",
    "include-css-link": "includeCssLink",
    "inline-styles": "inlineStyles",
    "wrapping-div": "wrappingDiv",
    "div-classes": "divClasses",
  });
});

/** @internal */
export type GetPassageHtmlRequest$Outbound = {
  q: string;
  "include-passage-references": boolean;
  "include-verse-numbers": boolean;
  "include-first-verse-numbers": boolean;
  "include-footnotes": boolean;
  "include-footnote-body": boolean;
  "include-headings": boolean;
  "include-short-copyright": boolean;
  "include-copyright": boolean;
  "include-passage-horizontal-lines": boolean;
  "include-heading-horizontal-lines": boolean;
  "horizontal-line-length": number;
  "include-selahs": boolean;
  "include-css-link": boolean;
  "inline-styles": boolean;
  "wrapping-div": boolean;
  "div-classes": string;
};

/** @internal */
export const GetPassageHtmlRequest$outboundSchema: z.ZodType<
  GetPassageHtmlRequest$Outbound,
  z.ZodTypeDef,
  GetPassageHtmlRequest
> = z.object({
  q: z.string(),
  includePassageReferences: z.boolean().default(true),
  includeVerseNumbers: z.boolean().default(true),
  includeFirstVerseNumbers: z.boolean().default(true),
  includeFootnotes: z.boolean().default(true),
  includeFootnoteBody: z.boolean().default(true),
  includeHeadings: z.boolean().default(true),
  includeShortCopyright: z.boolean().default(false),
  includeCopyright: z.boolean().default(false),
  includePassageHorizontalLines: z.boolean().default(false),
  includeHeadingHorizontalLines: z.boolean().default(false),
  horizontalLineLength: z.number().int().default(55),
  includeSelahs: z.boolean().default(true),
  includeCssLink: z.boolean().default(true),
  inlineStyles: z.boolean().default(false),
  wrappingDiv: z.boolean().default(true),
  divClasses: z.string().default("esv"),
}).transform((v) => {
  return remap$(v, {
    includePassageReferences: "include-passage-references",
    includeVerseNumbers: "include-verse-numbers",
    includeFirstVerseNumbers: "include-first-verse-numbers",
    includeFootnotes: "include-footnotes",
    includeFootnoteBody: "include-footnote-body",
    includeHeadings: "include-headings",
    includeShortCopyright: "include-short-copyright",
    includeCopyright: "include-copyright",
    includePassageHorizontalLines: "include-passage-horizontal-lines",
    includeHeadingHorizontalLines: "include-heading-horizontal-lines",
    horizontalLineLength: "horizontal-line-length",
    includeSelahs: "include-selahs",
    includeCssLink: "include-css-link",
    inlineStyles: "inline-styles",
    wrappingDiv: "wrapping-div",
    divClasses: "div-classes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPassageHtmlRequest$ {
  /** @deprecated use `GetPassageHtmlRequest$inboundSchema` instead. */
  export const inboundSchema = GetPassageHtmlRequest$inboundSchema;
  /** @deprecated use `GetPassageHtmlRequest$outboundSchema` instead. */
  export const outboundSchema = GetPassageHtmlRequest$outboundSchema;
  /** @deprecated use `GetPassageHtmlRequest$Outbound` instead. */
  export type Outbound = GetPassageHtmlRequest$Outbound;
}

export function getPassageHtmlRequestToJSON(
  getPassageHtmlRequest: GetPassageHtmlRequest,
): string {
  return JSON.stringify(
    GetPassageHtmlRequest$outboundSchema.parse(getPassageHtmlRequest),
  );
}

export function getPassageHtmlRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPassageHtmlRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPassageHtmlRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPassageHtmlRequest' from JSON`,
  );
}

/** @internal */
export const PassageMeta$inboundSchema: z.ZodType<
  PassageMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  canonical: z.string().optional(),
  chapter_start: z.array(z.number().int()).optional(),
  chapter_end: z.array(z.number().int()).optional(),
  prev_verse: z.array(z.number().int()).optional(),
  next_verse: z.array(z.number().int()).optional(),
  prev_chapter: z.array(z.number().int()).optional(),
  next_chapter: z.array(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "chapter_start": "chapterStart",
    "chapter_end": "chapterEnd",
    "prev_verse": "prevVerse",
    "next_verse": "nextVerse",
    "prev_chapter": "prevChapter",
    "next_chapter": "nextChapter",
  });
});

/** @internal */
export type PassageMeta$Outbound = {
  canonical?: string | undefined;
  chapter_start?: Array<number> | undefined;
  chapter_end?: Array<number> | undefined;
  prev_verse?: Array<number> | undefined;
  next_verse?: Array<number> | undefined;
  prev_chapter?: Array<number> | undefined;
  next_chapter?: Array<number> | undefined;
};

/** @internal */
export const PassageMeta$outboundSchema: z.ZodType<
  PassageMeta$Outbound,
  z.ZodTypeDef,
  PassageMeta
> = z.object({
  canonical: z.string().optional(),
  chapterStart: z.array(z.number().int()).optional(),
  chapterEnd: z.array(z.number().int()).optional(),
  prevVerse: z.array(z.number().int()).optional(),
  nextVerse: z.array(z.number().int()).optional(),
  prevChapter: z.array(z.number().int()).optional(),
  nextChapter: z.array(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    chapterStart: "chapter_start",
    chapterEnd: "chapter_end",
    prevVerse: "prev_verse",
    nextVerse: "next_verse",
    prevChapter: "prev_chapter",
    nextChapter: "next_chapter",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PassageMeta$ {
  /** @deprecated use `PassageMeta$inboundSchema` instead. */
  export const inboundSchema = PassageMeta$inboundSchema;
  /** @deprecated use `PassageMeta$outboundSchema` instead. */
  export const outboundSchema = PassageMeta$outboundSchema;
  /** @deprecated use `PassageMeta$Outbound` instead. */
  export type Outbound = PassageMeta$Outbound;
}

export function passageMetaToJSON(passageMeta: PassageMeta): string {
  return JSON.stringify(PassageMeta$outboundSchema.parse(passageMeta));
}

export function passageMetaFromJSON(
  jsonString: string,
): SafeParseResult<PassageMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PassageMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PassageMeta' from JSON`,
  );
}

/** @internal */
export const GetPassageHtmlResponseBody$inboundSchema: z.ZodType<
  GetPassageHtmlResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
  canonical: z.string().optional(),
  parsed: z.array(z.array(z.number().int())).optional(),
  passage_meta: z.array(z.lazy(() => PassageMeta$inboundSchema)).optional(),
  passages: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "passage_meta": "passageMeta",
  });
});

/** @internal */
export type GetPassageHtmlResponseBody$Outbound = {
  query?: string | undefined;
  canonical?: string | undefined;
  parsed?: Array<Array<number>> | undefined;
  passage_meta?: Array<PassageMeta$Outbound> | undefined;
  passages?: Array<string> | undefined;
};

/** @internal */
export const GetPassageHtmlResponseBody$outboundSchema: z.ZodType<
  GetPassageHtmlResponseBody$Outbound,
  z.ZodTypeDef,
  GetPassageHtmlResponseBody
> = z.object({
  query: z.string().optional(),
  canonical: z.string().optional(),
  parsed: z.array(z.array(z.number().int())).optional(),
  passageMeta: z.array(z.lazy(() => PassageMeta$outboundSchema)).optional(),
  passages: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passageMeta: "passage_meta",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPassageHtmlResponseBody$ {
  /** @deprecated use `GetPassageHtmlResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetPassageHtmlResponseBody$inboundSchema;
  /** @deprecated use `GetPassageHtmlResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetPassageHtmlResponseBody$outboundSchema;
  /** @deprecated use `GetPassageHtmlResponseBody$Outbound` instead. */
  export type Outbound = GetPassageHtmlResponseBody$Outbound;
}

export function getPassageHtmlResponseBodyToJSON(
  getPassageHtmlResponseBody: GetPassageHtmlResponseBody,
): string {
  return JSON.stringify(
    GetPassageHtmlResponseBody$outboundSchema.parse(getPassageHtmlResponseBody),
  );
}

export function getPassageHtmlResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetPassageHtmlResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPassageHtmlResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPassageHtmlResponseBody' from JSON`,
  );
}
