/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Character to use for indentation
 */
export const IndentUsing = {
  Space: "space",
  Tab: "tab",
} as const;
/**
 * Character to use for indentation
 */
export type IndentUsing = ClosedEnum<typeof IndentUsing>;

export type GetPassageTextRequest = {
  /**
   * Bible passage reference (e.g., "John 3:16" or "43011016")
   */
  query: string;
  /**
   * Include passage references before passages
   */
  includePassageReferences?: boolean | undefined;
  /**
   * Include verse numbers
   */
  includeVerseNumbers?: boolean | undefined;
  /**
   * Include the verse number for the first verse of a chapter
   */
  includeFirstVerseNumbers?: boolean | undefined;
  /**
   * Include callouts to footnotes in the text.
   */
  includeFootnotes?: boolean | undefined;
  /**
   * Include footnote body content
   */
  includeFootnoteBody?: boolean | undefined;
  /**
   * Include passage headings
   */
  includeHeadings?: boolean | undefined;
  /**
   * Include a short copyright notice
   */
  includeShortCopyright?: boolean | undefined;
  /**
   * Include the full copyright notice
   */
  includeCopyright?: boolean | undefined;
  /**
   * Include horizontal lines between passages
   */
  includePassageHorizontalLines?: boolean | undefined;
  /**
   * Include horizontal lines under headings
   */
  includeHeadingHorizontalLines?: boolean | undefined;
  /**
   * Length of horizontal lines
   */
  horizontalLineLength?: number | undefined;
  /**
   * Include "Selah" in passage text
   */
  includeSelahs?: boolean | undefined;
  /**
   * Character to use for indentation
   */
  indentUsing?: IndentUsing | undefined;
  /**
   * Number of indentation characters for paragraphs
   */
  indentParagraphs?: number | undefined;
  /**
   * Number of indentation characters for poetry
   */
  indentPoetry?: number | undefined;
  /**
   * Number of indentation characters for poetry lines
   */
  indentPoetryLines?: number | undefined;
  /**
   * Number of indentation characters for declares
   */
  indentDeclares?: number | undefined;
  /**
   * Number of indentation characters for Psalm doxology
   */
  indentPsalmDoxology?: number | undefined;
  /**
   * Maximum line length
   */
  lineLength?: number | undefined;
};

/** @internal */
export const IndentUsing$inboundSchema: z.ZodNativeEnum<typeof IndentUsing> = z
  .nativeEnum(IndentUsing);

/** @internal */
export const IndentUsing$outboundSchema: z.ZodNativeEnum<typeof IndentUsing> =
  IndentUsing$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndentUsing$ {
  /** @deprecated use `IndentUsing$inboundSchema` instead. */
  export const inboundSchema = IndentUsing$inboundSchema;
  /** @deprecated use `IndentUsing$outboundSchema` instead. */
  export const outboundSchema = IndentUsing$outboundSchema;
}

/** @internal */
export const GetPassageTextRequest$inboundSchema: z.ZodType<
  GetPassageTextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  "include-passage-references": z.boolean().default(true),
  "include-verse-numbers": z.boolean().default(true),
  "include-first-verse-numbers": z.boolean().default(true),
  "include-footnotes": z.boolean().default(true),
  "include-footnote-body": z.boolean().default(true),
  "include-headings": z.boolean().default(true),
  "include-short-copyright": z.boolean().default(false),
  "include-copyright": z.boolean().default(false),
  "include-passage-horizontal-lines": z.boolean().default(false),
  "include-heading-horizontal-lines": z.boolean().default(false),
  "horizontal-line-length": z.number().int().default(55),
  "include-selahs": z.boolean().default(true),
  "indent-using": IndentUsing$inboundSchema.default("space"),
  "indent-paragraphs": z.number().int().default(2),
  "indent-poetry": z.number().int().default(2),
  "indent-poetry-lines": z.number().int().default(4),
  "indent-declares": z.number().int().default(40),
  "indent-psalm-doxology": z.number().int().default(30),
  "line-length": z.number().int().default(0),
}).transform((v) => {
  return remap$(v, {
    "include-passage-references": "includePassageReferences",
    "include-verse-numbers": "includeVerseNumbers",
    "include-first-verse-numbers": "includeFirstVerseNumbers",
    "include-footnotes": "includeFootnotes",
    "include-footnote-body": "includeFootnoteBody",
    "include-headings": "includeHeadings",
    "include-short-copyright": "includeShortCopyright",
    "include-copyright": "includeCopyright",
    "include-passage-horizontal-lines": "includePassageHorizontalLines",
    "include-heading-horizontal-lines": "includeHeadingHorizontalLines",
    "horizontal-line-length": "horizontalLineLength",
    "include-selahs": "includeSelahs",
    "indent-using": "indentUsing",
    "indent-paragraphs": "indentParagraphs",
    "indent-poetry": "indentPoetry",
    "indent-poetry-lines": "indentPoetryLines",
    "indent-declares": "indentDeclares",
    "indent-psalm-doxology": "indentPsalmDoxology",
    "line-length": "lineLength",
  });
});

/** @internal */
export type GetPassageTextRequest$Outbound = {
  query: string;
  "include-passage-references": boolean;
  "include-verse-numbers": boolean;
  "include-first-verse-numbers": boolean;
  "include-footnotes": boolean;
  "include-footnote-body": boolean;
  "include-headings": boolean;
  "include-short-copyright": boolean;
  "include-copyright": boolean;
  "include-passage-horizontal-lines": boolean;
  "include-heading-horizontal-lines": boolean;
  "horizontal-line-length": number;
  "include-selahs": boolean;
  "indent-using": string;
  "indent-paragraphs": number;
  "indent-poetry": number;
  "indent-poetry-lines": number;
  "indent-declares": number;
  "indent-psalm-doxology": number;
  "line-length": number;
};

/** @internal */
export const GetPassageTextRequest$outboundSchema: z.ZodType<
  GetPassageTextRequest$Outbound,
  z.ZodTypeDef,
  GetPassageTextRequest
> = z.object({
  query: z.string(),
  includePassageReferences: z.boolean().default(true),
  includeVerseNumbers: z.boolean().default(true),
  includeFirstVerseNumbers: z.boolean().default(true),
  includeFootnotes: z.boolean().default(true),
  includeFootnoteBody: z.boolean().default(true),
  includeHeadings: z.boolean().default(true),
  includeShortCopyright: z.boolean().default(false),
  includeCopyright: z.boolean().default(false),
  includePassageHorizontalLines: z.boolean().default(false),
  includeHeadingHorizontalLines: z.boolean().default(false),
  horizontalLineLength: z.number().int().default(55),
  includeSelahs: z.boolean().default(true),
  indentUsing: IndentUsing$outboundSchema.default("space"),
  indentParagraphs: z.number().int().default(2),
  indentPoetry: z.number().int().default(2),
  indentPoetryLines: z.number().int().default(4),
  indentDeclares: z.number().int().default(40),
  indentPsalmDoxology: z.number().int().default(30),
  lineLength: z.number().int().default(0),
}).transform((v) => {
  return remap$(v, {
    includePassageReferences: "include-passage-references",
    includeVerseNumbers: "include-verse-numbers",
    includeFirstVerseNumbers: "include-first-verse-numbers",
    includeFootnotes: "include-footnotes",
    includeFootnoteBody: "include-footnote-body",
    includeHeadings: "include-headings",
    includeShortCopyright: "include-short-copyright",
    includeCopyright: "include-copyright",
    includePassageHorizontalLines: "include-passage-horizontal-lines",
    includeHeadingHorizontalLines: "include-heading-horizontal-lines",
    horizontalLineLength: "horizontal-line-length",
    includeSelahs: "include-selahs",
    indentUsing: "indent-using",
    indentParagraphs: "indent-paragraphs",
    indentPoetry: "indent-poetry",
    indentPoetryLines: "indent-poetry-lines",
    indentDeclares: "indent-declares",
    indentPsalmDoxology: "indent-psalm-doxology",
    lineLength: "line-length",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPassageTextRequest$ {
  /** @deprecated use `GetPassageTextRequest$inboundSchema` instead. */
  export const inboundSchema = GetPassageTextRequest$inboundSchema;
  /** @deprecated use `GetPassageTextRequest$outboundSchema` instead. */
  export const outboundSchema = GetPassageTextRequest$outboundSchema;
  /** @deprecated use `GetPassageTextRequest$Outbound` instead. */
  export type Outbound = GetPassageTextRequest$Outbound;
}

export function getPassageTextRequestToJSON(
  getPassageTextRequest: GetPassageTextRequest,
): string {
  return JSON.stringify(
    GetPassageTextRequest$outboundSchema.parse(getPassageTextRequest),
  );
}

export function getPassageTextRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPassageTextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPassageTextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPassageTextRequest' from JSON`,
  );
}
