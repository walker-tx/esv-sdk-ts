/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchPassagesRequest = {
  /**
   * The text to search for
   */
  query: string;
  /**
   * Number of results to return per page
   */
  pageSize?: number | undefined;
  /**
   * Page number to return
   */
  page?: number | undefined;
};

export type Verses = {
  /**
   * Verse reference
   */
  verse?: string | undefined;
  /**
   * Verse text
   */
  text?: string | undefined;
};

export type Results = {
  /**
   * The passage reference
   */
  reference?: string | undefined;
  /**
   * The matching passage content
   */
  content?: string | undefined;
  verses?: Array<Verses> | undefined;
};

/**
 * Successful response
 */
export type SearchPassagesResponseBody = {
  /**
   * Current page number
   */
  page?: number | undefined;
  /**
   * Total number of pages
   */
  totalPages?: number | undefined;
  /**
   * Total number of results
   */
  totalResults?: number | undefined;
  results?: Array<Results> | undefined;
};

export type SearchPassagesResponse = {
  result: SearchPassagesResponseBody;
};

/** @internal */
export const SearchPassagesRequest$inboundSchema: z.ZodType<
  SearchPassagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  "page-size": z.number().int().default(20),
  page: z.number().int().default(1),
}).transform((v) => {
  return remap$(v, {
    "page-size": "pageSize",
  });
});

/** @internal */
export type SearchPassagesRequest$Outbound = {
  query: string;
  "page-size": number;
  page: number;
};

/** @internal */
export const SearchPassagesRequest$outboundSchema: z.ZodType<
  SearchPassagesRequest$Outbound,
  z.ZodTypeDef,
  SearchPassagesRequest
> = z.object({
  query: z.string(),
  pageSize: z.number().int().default(20),
  page: z.number().int().default(1),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page-size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchPassagesRequest$ {
  /** @deprecated use `SearchPassagesRequest$inboundSchema` instead. */
  export const inboundSchema = SearchPassagesRequest$inboundSchema;
  /** @deprecated use `SearchPassagesRequest$outboundSchema` instead. */
  export const outboundSchema = SearchPassagesRequest$outboundSchema;
  /** @deprecated use `SearchPassagesRequest$Outbound` instead. */
  export type Outbound = SearchPassagesRequest$Outbound;
}

export function searchPassagesRequestToJSON(
  searchPassagesRequest: SearchPassagesRequest,
): string {
  return JSON.stringify(
    SearchPassagesRequest$outboundSchema.parse(searchPassagesRequest),
  );
}

export function searchPassagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchPassagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchPassagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchPassagesRequest' from JSON`,
  );
}

/** @internal */
export const Verses$inboundSchema: z.ZodType<Verses, z.ZodTypeDef, unknown> = z
  .object({
    verse: z.string().optional(),
    text: z.string().optional(),
  });

/** @internal */
export type Verses$Outbound = {
  verse?: string | undefined;
  text?: string | undefined;
};

/** @internal */
export const Verses$outboundSchema: z.ZodType<
  Verses$Outbound,
  z.ZodTypeDef,
  Verses
> = z.object({
  verse: z.string().optional(),
  text: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Verses$ {
  /** @deprecated use `Verses$inboundSchema` instead. */
  export const inboundSchema = Verses$inboundSchema;
  /** @deprecated use `Verses$outboundSchema` instead. */
  export const outboundSchema = Verses$outboundSchema;
  /** @deprecated use `Verses$Outbound` instead. */
  export type Outbound = Verses$Outbound;
}

export function versesToJSON(verses: Verses): string {
  return JSON.stringify(Verses$outboundSchema.parse(verses));
}

export function versesFromJSON(
  jsonString: string,
): SafeParseResult<Verses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Verses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Verses' from JSON`,
  );
}

/** @internal */
export const Results$inboundSchema: z.ZodType<Results, z.ZodTypeDef, unknown> =
  z.object({
    reference: z.string().optional(),
    content: z.string().optional(),
    verses: z.array(z.lazy(() => Verses$inboundSchema)).optional(),
  });

/** @internal */
export type Results$Outbound = {
  reference?: string | undefined;
  content?: string | undefined;
  verses?: Array<Verses$Outbound> | undefined;
};

/** @internal */
export const Results$outboundSchema: z.ZodType<
  Results$Outbound,
  z.ZodTypeDef,
  Results
> = z.object({
  reference: z.string().optional(),
  content: z.string().optional(),
  verses: z.array(z.lazy(() => Verses$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Results$ {
  /** @deprecated use `Results$inboundSchema` instead. */
  export const inboundSchema = Results$inboundSchema;
  /** @deprecated use `Results$outboundSchema` instead. */
  export const outboundSchema = Results$outboundSchema;
  /** @deprecated use `Results$Outbound` instead. */
  export type Outbound = Results$Outbound;
}

export function resultsToJSON(results: Results): string {
  return JSON.stringify(Results$outboundSchema.parse(results));
}

export function resultsFromJSON(
  jsonString: string,
): SafeParseResult<Results, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Results$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Results' from JSON`,
  );
}

/** @internal */
export const SearchPassagesResponseBody$inboundSchema: z.ZodType<
  SearchPassagesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  total_pages: z.number().int().optional(),
  total_results: z.number().int().optional(),
  results: z.array(z.lazy(() => Results$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "total_pages": "totalPages",
    "total_results": "totalResults",
  });
});

/** @internal */
export type SearchPassagesResponseBody$Outbound = {
  page?: number | undefined;
  total_pages?: number | undefined;
  total_results?: number | undefined;
  results?: Array<Results$Outbound> | undefined;
};

/** @internal */
export const SearchPassagesResponseBody$outboundSchema: z.ZodType<
  SearchPassagesResponseBody$Outbound,
  z.ZodTypeDef,
  SearchPassagesResponseBody
> = z.object({
  page: z.number().int().optional(),
  totalPages: z.number().int().optional(),
  totalResults: z.number().int().optional(),
  results: z.array(z.lazy(() => Results$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    totalPages: "total_pages",
    totalResults: "total_results",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchPassagesResponseBody$ {
  /** @deprecated use `SearchPassagesResponseBody$inboundSchema` instead. */
  export const inboundSchema = SearchPassagesResponseBody$inboundSchema;
  /** @deprecated use `SearchPassagesResponseBody$outboundSchema` instead. */
  export const outboundSchema = SearchPassagesResponseBody$outboundSchema;
  /** @deprecated use `SearchPassagesResponseBody$Outbound` instead. */
  export type Outbound = SearchPassagesResponseBody$Outbound;
}

export function searchPassagesResponseBodyToJSON(
  searchPassagesResponseBody: SearchPassagesResponseBody,
): string {
  return JSON.stringify(
    SearchPassagesResponseBody$outboundSchema.parse(searchPassagesResponseBody),
  );
}

export function searchPassagesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<SearchPassagesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchPassagesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchPassagesResponseBody' from JSON`,
  );
}

/** @internal */
export const SearchPassagesResponse$inboundSchema: z.ZodType<
  SearchPassagesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => SearchPassagesResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type SearchPassagesResponse$Outbound = {
  Result: SearchPassagesResponseBody$Outbound;
};

/** @internal */
export const SearchPassagesResponse$outboundSchema: z.ZodType<
  SearchPassagesResponse$Outbound,
  z.ZodTypeDef,
  SearchPassagesResponse
> = z.object({
  result: z.lazy(() => SearchPassagesResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchPassagesResponse$ {
  /** @deprecated use `SearchPassagesResponse$inboundSchema` instead. */
  export const inboundSchema = SearchPassagesResponse$inboundSchema;
  /** @deprecated use `SearchPassagesResponse$outboundSchema` instead. */
  export const outboundSchema = SearchPassagesResponse$outboundSchema;
  /** @deprecated use `SearchPassagesResponse$Outbound` instead. */
  export type Outbound = SearchPassagesResponse$Outbound;
}

export function searchPassagesResponseToJSON(
  searchPassagesResponse: SearchPassagesResponse,
): string {
  return JSON.stringify(
    SearchPassagesResponse$outboundSchema.parse(searchPassagesResponse),
  );
}

export function searchPassagesResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchPassagesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchPassagesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchPassagesResponse' from JSON`,
  );
}
