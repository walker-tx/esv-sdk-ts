/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PassageMeta,
  PassageMeta$inboundSchema,
  PassageMeta$Outbound,
  PassageMeta$outboundSchema,
} from "./passagemeta.js";

export type PassageResponse = {
  /**
   * The passage reference that was requested
   */
  query?: string | undefined;
  /**
   * The canonical version of the passage reference
   */
  canonical?: string | undefined;
  /**
   * Array of parsed passage references
   */
  parsed?: Array<Array<number>> | undefined;
  passageMeta?: Array<PassageMeta> | undefined;
  /**
   * Array of formatted passage text
   */
  passages?: Array<string> | undefined;
};

/** @internal */
export const PassageResponse$inboundSchema: z.ZodType<
  PassageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
  canonical: z.string().optional(),
  parsed: z.array(z.array(z.number().int())).optional(),
  passage_meta: z.array(PassageMeta$inboundSchema).optional(),
  passages: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "passage_meta": "passageMeta",
  });
});

/** @internal */
export type PassageResponse$Outbound = {
  query?: string | undefined;
  canonical?: string | undefined;
  parsed?: Array<Array<number>> | undefined;
  passage_meta?: Array<PassageMeta$Outbound> | undefined;
  passages?: Array<string> | undefined;
};

/** @internal */
export const PassageResponse$outboundSchema: z.ZodType<
  PassageResponse$Outbound,
  z.ZodTypeDef,
  PassageResponse
> = z.object({
  query: z.string().optional(),
  canonical: z.string().optional(),
  parsed: z.array(z.array(z.number().int())).optional(),
  passageMeta: z.array(PassageMeta$outboundSchema).optional(),
  passages: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passageMeta: "passage_meta",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PassageResponse$ {
  /** @deprecated use `PassageResponse$inboundSchema` instead. */
  export const inboundSchema = PassageResponse$inboundSchema;
  /** @deprecated use `PassageResponse$outboundSchema` instead. */
  export const outboundSchema = PassageResponse$outboundSchema;
  /** @deprecated use `PassageResponse$Outbound` instead. */
  export type Outbound = PassageResponse$Outbound;
}

export function passageResponseToJSON(
  passageResponse: PassageResponse,
): string {
  return JSON.stringify(PassageResponse$outboundSchema.parse(passageResponse));
}

export function passageResponseFromJSON(
  jsonString: string,
): SafeParseResult<PassageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PassageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PassageResponse' from JSON`,
  );
}
