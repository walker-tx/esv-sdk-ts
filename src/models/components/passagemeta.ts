/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PassageMeta = {
  canonical?: string | undefined;
  chapterStart?: Array<number> | undefined;
  chapterEnd?: Array<number> | undefined;
  prevVerse?: number | undefined;
  nextVerse?: number | undefined;
  prevChapter?: Array<number> | undefined;
  nextChapter?: Array<number> | undefined;
};

/** @internal */
export const PassageMeta$inboundSchema: z.ZodType<
  PassageMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  canonical: z.string().optional(),
  chapter_start: z.array(z.number().int()).optional(),
  chapter_end: z.array(z.number().int()).optional(),
  prev_verse: z.number().int().optional(),
  next_verse: z.number().int().optional(),
  prev_chapter: z.array(z.number().int()).optional(),
  next_chapter: z.array(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "chapter_start": "chapterStart",
    "chapter_end": "chapterEnd",
    "prev_verse": "prevVerse",
    "next_verse": "nextVerse",
    "prev_chapter": "prevChapter",
    "next_chapter": "nextChapter",
  });
});

/** @internal */
export type PassageMeta$Outbound = {
  canonical?: string | undefined;
  chapter_start?: Array<number> | undefined;
  chapter_end?: Array<number> | undefined;
  prev_verse?: number | undefined;
  next_verse?: number | undefined;
  prev_chapter?: Array<number> | undefined;
  next_chapter?: Array<number> | undefined;
};

/** @internal */
export const PassageMeta$outboundSchema: z.ZodType<
  PassageMeta$Outbound,
  z.ZodTypeDef,
  PassageMeta
> = z.object({
  canonical: z.string().optional(),
  chapterStart: z.array(z.number().int()).optional(),
  chapterEnd: z.array(z.number().int()).optional(),
  prevVerse: z.number().int().optional(),
  nextVerse: z.number().int().optional(),
  prevChapter: z.array(z.number().int()).optional(),
  nextChapter: z.array(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    chapterStart: "chapter_start",
    chapterEnd: "chapter_end",
    prevVerse: "prev_verse",
    nextVerse: "next_verse",
    prevChapter: "prev_chapter",
    nextChapter: "next_chapter",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PassageMeta$ {
  /** @deprecated use `PassageMeta$inboundSchema` instead. */
  export const inboundSchema = PassageMeta$inboundSchema;
  /** @deprecated use `PassageMeta$outboundSchema` instead. */
  export const outboundSchema = PassageMeta$outboundSchema;
  /** @deprecated use `PassageMeta$Outbound` instead. */
  export type Outbound = PassageMeta$Outbound;
}

export function passageMetaToJSON(passageMeta: PassageMeta): string {
  return JSON.stringify(PassageMeta$outboundSchema.parse(passageMeta));
}

export function passageMetaFromJSON(
  jsonString: string,
): SafeParseResult<PassageMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PassageMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PassageMeta' from JSON`,
  );
}
