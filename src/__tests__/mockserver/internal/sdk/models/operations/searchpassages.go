// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type SearchPassagesRequest struct {
	// The text to search for
	Query string `queryParam:"style=form,explode=true,name=q"`
	// Number of results to return per page
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page-size"`
	// Page number to return
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
}

func (s SearchPassagesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchPassagesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchPassagesRequest) GetQuery() string {
	if o == nil {
		return ""
	}
	return o.Query
}

func (o *SearchPassagesRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *SearchPassagesRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

type Verse struct {
	// Verse reference
	Verse *string `json:"verse,omitempty"`
	// Verse text
	Text *string `json:"text,omitempty"`
}

func (o *Verse) GetVerse() *string {
	if o == nil {
		return nil
	}
	return o.Verse
}

func (o *Verse) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

type Result struct {
	// The passage reference
	Reference *string `json:"reference,omitempty"`
	// The matching passage content
	Content *string `json:"content,omitempty"`
	Verses  []Verse `json:"verses,omitempty"`
}

func (o *Result) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *Result) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *Result) GetVerses() []Verse {
	if o == nil {
		return nil
	}
	return o.Verses
}

// SearchPassagesResponseBody - Successful response
type SearchPassagesResponseBody struct {
	// Current page number
	Page *int64 `json:"page,omitempty"`
	// Total number of pages
	TotalPages *int64 `json:"total_pages,omitempty"`
	// Total number of results
	TotalResults *int64   `json:"total_results,omitempty"`
	Results      []Result `json:"results,omitempty"`
}

func (o *SearchPassagesResponseBody) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *SearchPassagesResponseBody) GetTotalPages() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalPages
}

func (o *SearchPassagesResponseBody) GetTotalResults() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalResults
}

func (o *SearchPassagesResponseBody) GetResults() []Result {
	if o == nil {
		return nil
	}
	return o.Results
}

type SearchPassagesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *SearchPassagesResponseBody

	Next func() (*SearchPassagesResponse, error)
}

func (o *SearchPassagesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *SearchPassagesResponse) GetObject() *SearchPassagesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
